#encoding:utf-8
# __author__ = 'donghao'
# __time__ = 2019/3/18 13:40
'''
这是计算机科学史上最古老的同步原语之一，由早期荷兰计算机科学家Edsger W. Dijkstra（他使用名称P()而V()不是acquire()和 release()）发明。

信号量管理内部计数器，该计数器按每次acquire()调用递减并按每次 调用递增release() 。计数器永远不会低于零; 当acquire() 发现它为零时，它会阻塞，等待其他线程调用 release()。

class threading.Semaphore（value = 1 ）
该类实现信号量对象。信号量管理一个计数器，表示release()呼叫数减去acquire()呼叫数 加上初始值。该acquire()方法在必要时阻止，直到它可以返回而不使计数器为负。如果没有给出，则值默认为1。

可选参数给出内部计数器的初始值 ; 它默认为1。如果给定的值小于0，ValueError则引发。

在版本3.3中更改：从工厂功能更改为类。

acquire（blocking = True，timeout = None ）
获取信号量。

在不带参数的情况下调用：如果内部计数器在输入时大于零，则将其减1并立即返回。如果在进入时为零，则阻塞，等待其他线程调用 release()以使其大于零。这是通过适当的互锁来完成的，这样如果多个acquire()呼叫被阻止，它们release()将完全唤醒其中一个。实现可以随机选择一个，因此不应该依赖被阻塞的线程被唤醒的顺序。返回true（或无限期地阻塞）。

当阻塞设置为false 时调用，请勿阻止。如果没有参数的调用会阻塞，则立即返回false; 否则，执行与不带参数调用时相同的操作，并返回true。

当使用超时之外的超时调用时None，它将阻止最多超时秒。如果在该时间间隔内未成功完成获取，则返回false。否则返回true。

改变在3.2版本：该超时参数是新的。

release（）
释放信号量，将内部计数器递增1。当它在进入时为零并且另一个线程正在等待它再次大于零时，唤醒该线程。

class threading.BoundedSemaphore（value = 1 ）
实现有界信号量对象的类。有界信号量检查以确保其当前值不超过其初始值。如果确实如此， ValueError则提出。在大多数情况下，信号量用于保护容量有限的资源。如果信号量被释放太多次，则表明存在错误。如果没有给出，则值默认为1。

在版本3.3中更改：从工厂功能更改为类。
'''