#encoding:utf-8
# __author__ = 'donghao'
# __time__ = 2019/3/18 13:29
"""
原始锁是一种同步原语，在锁定时不属于特定线程。在Python中，它是目前可用的最低级别同步原语，由_thread 扩展模块直接实现。

原始锁定处于“锁定”或“解锁”两种状态之一。它是在解锁状态下创建的。它有两种基本方法，acquire()和 release()
"""

"""
当状态解锁时，acquire() 将状态更改为已锁定并立即返回。
当状态被锁定时， acquire()阻塞直到release()另一个线程中的调用将其更改为解锁，
然后该acquire()调用将其重置为已锁定并返回。该release()方法只应在锁定状态下调用; 
它将状态更改为已解锁并立即返回。如果尝试释放未锁定的锁， RuntimeError则会引发a。
"""

"""
类threading.Lock¶
实现原始锁定对象的类。一旦线程获得了一个锁，后续尝试获取它就会阻塞，直到它被释放; 任何线程都可以释放它。

请注意，Lock它实际上是一个工厂函数，它返回平台支持的具体Lock类的最高效版本的实例。

acquire（blocking = True，timeout = -1 ）
获取锁定，阻止或非阻止。

当阻塞参数设置为True（默认值）时调用，阻塞直到解锁，然后将其设置为锁定并返回True。

在阻塞参数设置为的情况下调用时False，请勿阻止。如果阻塞设置为True阻塞，则False 立即返回; 否则，将锁定设置为锁定并返回True。

在浮点超时参数设置为正值的情况下调用时，最多阻止超时指定的秒数， 并且只要无法获取锁定。一个超时的参数-1 指定了一个无限的等待。阻止为false 时禁止指定超时。

返回值True是否成功获取锁定， False否则（例如超时到期）。

改变在3.2版本：该超时参数是新的。

在版本3.2中更改：现在可以通过POSIX上的信号中断锁定获取。

release（）
解锁。这可以从任何线程调用，而不仅仅是获取锁的线程。

锁定锁定后，将其重置为解锁状态，然后返回。如果阻止任何其他线程等待锁解锁，则只允许其中一个继续执行。

在未锁定的锁上调用时，RuntimeError会引发a。

没有回报价值。"""