#encoding:utf-8
# __author__ = 'donghao'
# __time__ = 2019/3/18 13:34
'''
可重入锁是同步原语，可以由同一线程多次获取。在内部，除了原始锁使用的锁定/解锁状态之外，它还使用“拥有线程”和“递归级别”的概念。在锁定状态下，某些线程拥有锁; 在解锁状态下，没有线程拥有它。

要锁定锁，线程会调用其acquire()方法; 一旦线程拥有锁，它就会返回。要解锁锁，线程会调用其release()方法。acquire()/ release() call对可以嵌套; 只有最后一个release()（ release()最外面的一对）重置锁才能解锁并允许另一个被阻塞的线程acquire()继续进行。

可重入锁也支持上下文管理协议。

类threading.RLock
此类实现可重入锁定对象。必须由获取它的线程释放可重入锁。一旦线程获得了可重入锁，同一个线程可以再次获取它而不会阻塞; 线程必须在每次获取它时释放一次。

请注意，RLock它实际上是一个工厂函数，它返回平台支持的具体RLock类的最高效版本的实例。

acquire（blocking = True，timeout = -1 ）
获取锁定，阻止或非阻止。

在不带参数的情况下调用：如果此线程已拥有锁，则将递归级别递增1，并立即返回。否则，如果另一个线程拥有该锁，则阻塞直到锁被解锁。锁解锁后（不属于任何线程），然后获取所有权，将递归级别设置为1，然后返回。如果多个线程被阻塞等待锁解锁，则一次只能有一个线程获取锁的所有权。在这种情况下没有返回值。

在将blocking参数设置为true的情况下调用时，执行与不带参数调用时相同的操作，并返回true。

在将blocking参数设置为false的情况下调用时，请勿阻止。如果没有参数的调用会阻塞，则立即返回false; 否则，执行与不带参数调用时相同的操作，并返回true。

在浮点超时参数设置为正值的情况下调用时，最多阻止超时指定的秒数， 并且只要无法获取锁定。如果已获取锁定则返回true，如果超时已过，则返回false。

改变在3.2版本：该超时参数是新的。

release（）
释放锁定，递减递归级别。如果在递减之后它为零，则将锁重置为未锁定（不由任何线程拥有），并且如果阻止任何其他线程等待锁解锁，则允许其中一个继续进行。如果在递减之后递归级别仍然非零，则锁保持锁定并由调用线程拥有。

仅在调用线程拥有锁时调用此方法。RuntimeError如果在锁定解锁时调用此方法，则引发A.

没有回报价值。
'''